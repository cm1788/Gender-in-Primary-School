{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "120fe201",
   "metadata": {},
   "source": [
    "### TODO:\n",
    "* get and use page numbers\n",
    "* for found words, store in dataframe instead of lists (with metadata: character it relates to, book found in etc)\n",
    "* make plots and tables for all word types\n",
    "\n",
    "### TO DISCUSS:\n",
    "* names of secondary characters?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caef0fb4",
   "metadata": {},
   "source": [
    "### Resources:\n",
    "\n",
    "- https://github.com/peter3125/enhanced-subject-verb-object-extraction (better than standard Spacy for subject-verb-object extraction)\n",
    "- https://nbviewer.jupyter.org/gist/nealcaren/5105037 (how the Times writes about men and women)\n",
    "- https://spacy.io/usage/linguistic-features\n",
    "- https://stackoverflow.com/questions/40288323/what-do-spacys-part-of-speech-and-dependency-tags-mean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dbe6c6e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pdfplumber\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import Counter\n",
    "import spacy\n",
    "from spacy import displacy\n",
    "from spacy.lang.en.examples import sentences \n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6d143b8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "nlp = spacy.load(\"en_core_web_lg\")\n",
    "nlp.add_pipe(nlp.create_pipe('sentencizer'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "15479824",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "She -PRON- PRON PRP nsubj Xxx True True\n",
      "eats eat VERB VBZ ROOT xxxx True False\n",
      "the the DET DT det xxx True True\n",
      "apple apple NOUN NN dobj xxxx True False\n",
      "hungrily hungrily ADV RB advmod xxxx True False\n"
     ]
    }
   ],
   "source": [
    "doc = nlp(\"She eats the apple hungrily\")\n",
    "#doc = nlp(\"He was lazy\")\n",
    "\n",
    "for token in doc:\n",
    "    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n",
    "            token.shape_, token.is_alpha, token.is_stop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4130be06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"3a505d05a276410fa265feb8dc170056-0\" class=\"displacy\" width=\"650\" height=\"317.0\" direction=\"ltr\" style=\"max-width: none; height: 317.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">She</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PRON</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">eats</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">VERB</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">apple</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">hungrily</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">ADV</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-3a505d05a276410fa265feb8dc170056-0-0\" stroke-width=\"2px\" d=\"M70,182.0 C70,122.0 160.0,122.0 160.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-3a505d05a276410fa265feb8dc170056-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,184.0 L62,172.0 78,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-3a505d05a276410fa265feb8dc170056-0-1\" stroke-width=\"2px\" d=\"M310,182.0 C310,122.0 400.0,122.0 400.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-3a505d05a276410fa265feb8dc170056-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M310,184.0 L302,172.0 318,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-3a505d05a276410fa265feb8dc170056-0-2\" stroke-width=\"2px\" d=\"M190,182.0 C190,62.0 405.0,62.0 405.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-3a505d05a276410fa265feb8dc170056-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">dobj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M405.0,184.0 L413.0,172.0 397.0,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-3a505d05a276410fa265feb8dc170056-0-3\" stroke-width=\"2px\" d=\"M190,182.0 C190,2.0 530.0,2.0 530.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-3a505d05a276410fa265feb8dc170056-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advmod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M530.0,184.0 L538.0,172.0 522.0,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "63b3e3e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'adjectival modifier'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spacy.explain('amod')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "26f34f78",
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir('../text_pdfs')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "077eed1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame()\n",
    "\n",
    "def grab_text(title):\n",
    "    \n",
    "    all_text = ''\n",
    "    with pdfplumber.open(title) as pdf:\n",
    "        for page in pdf.pages:\n",
    "            single_page_text = page.extract_text()\n",
    "            \n",
    "            if single_page_text is not None:\n",
    "                all_text = all_text + '\\n' + single_page_text\n",
    "                \n",
    "    return all_text\n",
    "\n",
    "df['Title'] = [file.split('.')[0] for file in os.listdir()]\n",
    "df['Text'] = [grab_text(title + '.pdf') for title in df.Title]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8bece76e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Title</th>\n",
       "      <th>Text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Gruffalo</td>\n",
       "      <td>\\nA mouse took a stroll through the deep dark ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Peace at Last</td>\n",
       "      <td>\\nFirst published 1980 by Macmillan Children’s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Kipper's Toybox</td>\n",
       "      <td>\\nKipper’s Toybox\\nx x Mick Inkpen J\\nOther bo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>The Hungry Caterpillar</td>\n",
       "      <td>\\nTHE VERY\\nHUNGRY\\nCATERPILLAR\\nby Eric Carle...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Harry and the Dinosaurs Go Wild</td>\n",
       "      <td>\\nW Harry\\nPinosaurS\\n_ 'ni’l J&amp;l/\\nThis\\nHarr...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Title  \\\n",
       "0                     The Gruffalo   \n",
       "1                    Peace at Last   \n",
       "2                  Kipper's Toybox   \n",
       "3           The Hungry Caterpillar   \n",
       "4  Harry and the Dinosaurs Go Wild   \n",
       "\n",
       "                                                Text  \n",
       "0  \\nA mouse took a stroll through the deep dark ...  \n",
       "1  \\nFirst published 1980 by Macmillan Children’s...  \n",
       "2  \\nKipper’s Toybox\\nx x Mick Inkpen J\\nOther bo...  \n",
       "3  \\nTHE VERY\\nHUNGRY\\nCATERPILLAR\\nby Eric Carle...  \n",
       "4  \\nW Harry\\nPinosaurS\\n_ 'ni’l J&l/\\nThis\\nHarr...  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "761bf89d",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = df.loc[0].Text.replace('\\n', ' ').replace('  ', ' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f1e9ecb3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'A fox saw the mouse and the mouse looked good. '"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#test[0:50]\n",
    "test[51:98]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99dd43a8",
   "metadata": {},
   "source": [
    "#### This is an example of it failing (mouse should be dobj in this sentence):\n",
    "\n",
    "Note: would this work better https://github.com/peter3125/enhanced-subject-verb-object-extraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a93eb1d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A a DET DT det X True True\n",
      "fox fox NOUN NN nsubj xxx True False\n",
      "saw see VERB VBD ROOT xxx True False\n",
      "the the DET DT det xxx True True\n",
      "mouse mouse NOUN NN nsubj xxxx True False\n",
      "and and CCONJ CC cc xxx True True\n",
      "the the DET DT det xxx True True\n",
      "mouse mouse NOUN NN conj xxxx True False\n",
      "looked look VERB VBD ccomp xxxx True False\n",
      "good good ADJ JJ acomp xxxx True False\n",
      ". . PUNCT . punct . False False\n"
     ]
    }
   ],
   "source": [
    "doc = nlp(test[51:98])\n",
    "#doc = nlp(test[0:50])\n",
    "#doc = nlp(test)\n",
    "\n",
    "for token in doc:\n",
    "    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n",
    "            token.shape_, token.is_alpha, token.is_stop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "48797e69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"288665b732c24a48aeb0d6a8c151b04c-0\" class=\"displacy\" width=\"1050\" height=\"337.0\" direction=\"ltr\" style=\"max-width: none; height: 337.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">A</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"150\">fox</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"150\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"250\">saw</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"250\">VERB</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"350\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"350\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"450\">mouse</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"450\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"550\">and</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"550\">CCONJ</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"650\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"650\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"750\">mouse</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"750\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"850\">looked</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"850\">VERB</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"247.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"950\">good.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"950\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-0\" stroke-width=\"2px\" d=\"M70,202.0 C70,152.0 135.0,152.0 135.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,204.0 L62,192.0 78,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-1\" stroke-width=\"2px\" d=\"M170,202.0 C170,152.0 235.0,152.0 235.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M170,204.0 L162,192.0 178,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-2\" stroke-width=\"2px\" d=\"M370,202.0 C370,152.0 435.0,152.0 435.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M370,204.0 L362,192.0 378,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-3\" stroke-width=\"2px\" d=\"M470,202.0 C470,52.0 845.0,52.0 845.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M470,204.0 L462,192.0 478,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-4\" stroke-width=\"2px\" d=\"M470,202.0 C470,152.0 535.0,152.0 535.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-4\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">cc</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M535.0,204.0 L543.0,192.0 527.0,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-5\" stroke-width=\"2px\" d=\"M670,202.0 C670,152.0 735.0,152.0 735.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-5\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M670,204.0 L662,192.0 678,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-6\" stroke-width=\"2px\" d=\"M470,202.0 C470,102.0 740.0,102.0 740.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-6\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">conj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M740.0,204.0 L748.0,192.0 732.0,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-7\" stroke-width=\"2px\" d=\"M270,202.0 C270,2.0 850.0,2.0 850.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-7\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">ccomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M850.0,204.0 L858.0,192.0 842.0,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-288665b732c24a48aeb0d6a8c151b04c-0-8\" stroke-width=\"2px\" d=\"M870,202.0 C870,152.0 935.0,152.0 935.0,202.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-288665b732c24a48aeb0d6a8c151b04c-0-8\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">acomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M935.0,204.0 L943.0,192.0 927.0,192.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "displacy.render(doc, style=\"dep\", options={'distance':100});"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "768f8dc2",
   "metadata": {},
   "source": [
    "#### So, we want to get any he/she that appears, and the verbs and nouns that are associated with them.\n",
    "\n",
    "#### Then we will extend to use named entities also (with named characeters and their genders from the excel sheet).\n",
    "\n",
    "Other ideas:\n",
    "- get noun chunks\n",
    "- get adjectival modifiers (child of noun) for gendered nouns\n",
    "- get nsubj for each verb\n",
    "- get dobj for verbs with gendered nsubj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "6f22ff66",
   "metadata": {},
   "outputs": [],
   "source": [
    "doc = nlp(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0369b203",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for token in doc:\n",
    "#     if token.text.lower() =='he':\n",
    "#         print(token.text, token.head, [child for child in token.head.children])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7847792b",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_female_verbs = list()\n",
    "test_male_verbs = list()\n",
    "\n",
    "for title, text in zip(df.Title, df.Text):\n",
    "    text = ' '.join(text.replace('\\n', ' ').split())\n",
    "    doc = nlp(text)\n",
    "\n",
    "    for possible_subject in doc:\n",
    "            if possible_subject.dep_ == 'nsubj' and possible_subject.head.pos_ == 'VERB':\n",
    "                \n",
    "                if possible_subject.head.lemma_ == \"’\":\n",
    "                    #print(possible_subject.head, [child for child in possible_subject.head.children])\n",
    "                    #print(title)\n",
    "                    lem = 'be'\n",
    "                else:\n",
    "                    lem = possible_subject.head.lemma_\n",
    "                    \n",
    "                if possible_subject.lower_ == 'he':\n",
    "                    test_male_verbs.append(lem)\n",
    "                elif possible_subject.lower_ == 'she':    \n",
    "                    test_female_verbs.append(lem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "75745632",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "751\n",
      "201\n"
     ]
    }
   ],
   "source": [
    "print(len(test_male_verbs))\n",
    "print(len(test_female_verbs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2a74c631",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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L2UWuvt9wBXAX8xsKfAKcHCMsj4AzCAElYcJA2iL9duofI9F7/2fhD7ruPurwJmEQPwh4b2+l7XubYSBw+8QAv3a4Oruq4FDgZ0JUxMvJMwk1aWpAkXrDiEM3P5PlOewHOmWEQZ1H0doOZ1P+DzXj5J8B3gn+mxPA45vKm8RkVJz97fdfXqelxWLFIukytm6q8ciIuFmmcAp2ePhREREWpJikbRmuoIlIiIiIiKSElWwREREREREUqIugiIiIiIiIinRFSwREREREZGUtOr7YG266abetWtXunQJE8WsXr2aefPm8dlnn7HBBhvQs2dPOnbsWOZSiohIUjNmzFjo7t3LXY7m2nTTTb13794F07z66qt8/etfb5kCiYhIavLFqlZdwerduzdr1qxh+vQwE+opp5zCIYccwqmnnsq9997LlClTuP/++8tbSBERSczM3i13GdLQu3dvpk+fzr333pvzdXfntNNOWxvHRESk9cgXq1p1Bauh6dOn8+KLLwJwzjnncMstt5S3QCIiUlXM7AjgEKAzMMHdH4uz3rBhwzj++OMxs0avff7556mWUUREyqvVV7A++ugjfvOb3+DuLF26FHdfG8DWrNGNtEVEpDAzu4lwo9KP3H3HrOUHEW6O2h640d1/4e73A/ebWVfgV4SbnjapX79+nHvuuey4446NXnviCd3mR0SkmrT6SS5OPfVUli1bxvLlyznxxBNZuHAhAPPnz2fnnXcub+FERKQ1+BNwUPYCM2sP/A44GNgBGG5mO2QluTB6PZarr76azp0753ztvvvuS1hcERGpZK1ymnYzGwIM6du376lvvvlmuYsjIiIpM7MZ7l7bgvn1Bh7KXMEysz2Bse5+YPR8TJT0F9HjcXfPeenJzEYBowC22mqrXd59tyqGk4mISAP5YlWrvILl7nXuPioze2BD++23XwuXSEREqsyWwLys5+9Fy34A7A8cY2an5VrR3a9391p3r+3efd3kUpMnT+ass87i8MMP56ijjuInP/kJb731VgnfgoiIlEOrH4PVr1+/es/dnTfeeGPt8pdffrkcxRIRkSrk7tcA1yRdb8yYMcyfP5/Bgwczf/58tt56a/r06cPQoUO54IILGDp0aAlKKyIi5dDqK1i9e/emc+fOXHjhhXTq1Al3Z9CgQdTV1ZW7aCIi0nq9D/TMet4jWlaUhx56iNmzZwNw3HHHsffee3PllVdyzDHHMGjQIFWwRESqSKvsIpjtwQcf5Oijj2bUqFG89NJL9O7dm44dO9KrVy969epV7uKJiEjrNA34mpltbWbrAccBDxa7sXbt2rF48WIAPvjgA1avXg1A165daY1joUVEJL9WX8ECOPLII5k0aRJPP/00hx9+OCtXrix3kUREpJUwszuB54Btzew9M/ueu68CzgIeBeYAd7v7q8XmccEFFzBgwAAOOOAA9tprLy666CIAFixYQP/+/VN4FyIiUila5SyCGbW1tT59+vR6y1566SWee+45Tjst59hjERFpBVp6FsFSyY5TixcvZu7cufTt25eampryFkxERJotX6xq9WOwGurfv79aA0VEpOJ069aNbt26lbsYIiJSYlVRwXq7+6BY6fosmFrikoiIiOSmWCUi0jZUxRgsERGRSmJmQ8zs+iVLlpS7KCIi0sJUwRIREUmZu9e5+6guXbqUuygiItLCVMESERERERFJiSpYIiIiIiIiKVEFS0REREREJCWqYImIiIiIiKREFSwREREREZGUqIIlIiIiIiKSElWwREREREREUtIqK1i6gaOIiIiIiFSiVlnB0g0cRURERESkErXKCpaIiEglU08LEZG2SxUsERGRlKmnhYhI26UKloiIiIiISEpUwRIREREREUmJKlgiIiIiIiIpUQVLREREREQkJapgiYiIiIiIpEQVLBERERERkZSogiUiIiIiIpISVbBERERERERSogqWiIiIiIhISlTBEhERERERSYkqWCIiIikzsyFmdv2SJUvKXRQREWlhqmCJiIikzN3r3H1Uly5dyl0UERFpYapgiYiIiIiIpEQVLBERERERkZSogiUiIiIiIpISVbBERERERERSogqWiIiIiIhISlTBEhERERERSYkqWCIiIiIiIilRBUtERERERCQlrbKCZWZDzOz6JUuWlLsoIiIiIiIia7XKCpa717n7qC5dupS7KCIiIiIiImu1ygqWiIiIiIhIJVIFS0REJGXqyi4i0napgiUiIpIydWUXEWm7VMESERERERFJiSpYIiIiIiIiKVEFS0REREREJCWqYImIiIiIiKREFSwREREREZGUqIIlIiIiIiKSElWwREREREREUqIKloiIiIiISEpUwRIREREREUmJKlgiIiIiIiIpUQVLREREREQkJapgiYiIiIiIpEQVLBERERERkZSogiUiIiIiIpISVbBERERERERSogqWiIhIysxsiJldv2TJknIXRUREWpgqWCIiIilz9zp3H9WlS5dyF0VERFqYKlgiIiIiIiIpUQVLREREREQkJapgiYiIiIiIpEQVLBERERERkZSogiUiIiIiIpISVbBERERERERSogqWiIiIiIhISlTBEhERERERSYkqWCIiIiIiIilRBUtERERERCQlqmCJiIiIiIikpFVWsMxsiJldv2TJknIXRUREREREZK1WWcFy9zp3H9WlS5dyF0VERERERGStVlnBEhERERERqUSqYImIiIiIiKREFSwREREREZGUqIIlIiIiIiKSElWwREREUqbZbkVE2i5VsERERFKm2W5FRNouVbBERERERERSogqWiIiIiIhISlTBEhERERERSUmHQi+a2Z7ASGAQsAWwAngFeBi43d01eldERMpKsUpERCpJ3itYZjYJOAV4FDiIELR2AC4ENgAeMLPDWqKQIiIiuShWiYhIpSl0Bes77r6wwbLlwMzo8Wsz27RkJRMREWmaYpWIiFSUvFewsgOWmfUys/2j/zuZ2SYN04iIiLQ0xSoREak0TU5yYWanAn8FrosW9QDuL2GZREREElGsEhGRShFnFsEzgW8CSwHc/U3gy6UslIiISEKKVSIiUhHiVLD+6+4rM0/MrAPgpSuSiIhIYopVIiJSEeJUsKaY2QVAJzM7AJgI1JW2WCIiIokoVomISEWIU8H6CbAAmA18H3iEMP2tiIhIpVCsEhGRilDwRsMA7r4GuCF6iIiIVBzFKhERqRR5K1hmNpsC/dfdvV9JSiQiIhKTYpWIiFSaQlewDm2xUoiIiBRHsUpERCpK3gqWu7/bkgURERFJSrFKREQqTZwbDe9hZtPMbLmZrTSz1Wa2tCUKJyIiEkdbiFULFy4sdxFERCSGOLMIXgsMB94EOgGnAL8rZaFEREQSqqpYNWnSJLbeemv22msvZs2axde//nV23313evTowZNPPlnu4omISAFNziII4O5vmVl7d18N3Gxms4AxpS2aiIhIfNUUq8aMGcMjjzzCJ598wv7778/DDz/MHnvswZw5czj++OOZOXNmuYsoIiJ5xKlgfWZm6wEvmtkvgQ+Jd+VLRESkpVRVrGrXrh3bb789ABtuuCF77LEHANtvvz1r1qwpZ9FERKQJcSpY3yEEqbOAc4CewNGlLJSIiEhCVRWrampquO6661i6dCldu3blqquu4thjj+WJJ55g4403LnfxRESkgDgVrIXASnf/HPiZmbUH1i9tsURERBKpqlh1yy23MG7cONq1a8djjz3GnXfeyYEHHkivXr244QbdS1lEpJLFqWA9CewPLI+edwIeA75RqkKJiIgkVFWxqmfPnlx33XVrn59zzjmcc845ZSyRiIjEFad/+gbunglYRP9vWLoiiYiIJFZ1serRRx9lwoQJvPPOO/WW33TTTeUpkIiIxBKngvWpmQ3MPDGzXYAVpSuSiIhIYhUVq8xsiJldv2TJkqLWv+CCC7jsssuYPXs2gwcPZvz48Wtfu/baa9MqpoiIlECcLoI/Aiaa2QeAAZsDw0pZKBERkYR+RAXFKnevA+pqa2tPLWb9uro6Zs2aRYcOHRg7diwjRoxg7ty5XHXVVbh7yqUVEZE0NVnBcvdpZrYdsG206HV3/6K0xRIREYmv2mLVqlWr6NAhhOiamhrq6uoYNWoUQ4cOZeXKlWUunYiIFNJkF0EzG0ro2/4KcARwV3Y3DBERkXKrtljVp08fpkyZsvZ5+/btmTBhAttuuy1z5szJuU722Kz33nuPwYMHU1NTwze+8Q3eeOONkpdZRESCOGOwLnL3ZWa2FzAYmAD8obTFEhERSaSqYtXEiRPZbbfdGi0fN24c8+bNy7lO9tis0aNHM2zYMBYvXsx5553H6aefXrKyiohIfXEqWKujv4cAN7j7w8B6pSuSiIhIYlUVqzp16kSnTp1yvrbllls2uf4bb7zBqFGjaNeuHUceeSSLFy9Ou4giIpJHnEku3jez64ADgCvMbH3iVcxERERaStXFqre7D4qVrs+CqUDoFnj22Wfj7ixYsIAvvviCjh07AvDFF612OJqISKsTp4J1LHAQ8Ct3/8TMtgDOK22xREREEmnzserKK69c+39tbS3Lly+na9euzJ8/n8MOO6yMJRMRaVvizCL4GXBv1vMPgQ9LWSgREZEkFKvgxBNPzLl888035+c//3kLl0ZEpO1q1d0nREREZJ1HH32UCRMm8M4779Rbnj3DoIiIlJYqWCIiIlVgzJgxXHbZZcyePZvBgwczfvz4ta9lzzAoIiKlpQqWiIhIFXjooYd46qmnuPrqq5kxYwaTJk3inHPOAcDdy1w6EZG2I86NhpeZ2dIGj3lmdp+ZfbUlCikiIlKIYhWsWrWKDh3C0Oqamhrq6upYunQpQ4cOZeXKlWUunYhI2xHnCtbVhJmYtgR6AOcCdwB/AdSpW0REKsHVtPFY1adPH6ZMmbL2efv27ZkwYQLbbrstc+bMKWPJRETaljgVrMPc/Tp3X+buS939euBAd78L6Fri8omIiMTR5mPVxIkT2W233RotHzduHPPmzWu0fN68eRx33HEMGjSIn//85/XulXXEEUeUsqgiIlUtTgXrMzM71szaRY9jgc+j19SpW0REKkGbj1WdOnWiU6dOOV/bcsstGy07+eST2WeffRg/fjwffvghe++9N4sWLQLg3XffLWlZRUSqWZwbDR8P/Bb4ffT8OWCkmXUCzipVwURERBJQrALe7j4oVro+C6ayYMECTjvtNADGjx/P7bffzv/8z//w4IMPYmalLKaISFWLc6PhucCQPC//Pd3iiIiIJKdYldwXX3zB559/zgYbbADAyJEj2XzzzTnwwAP59NNPy1w6EZHWK84sgj2iWZg+ih73mFmPliiciIhIHIpVyZ1yyik8//zz9Zbtv//+TJw4kR133DHx9nbaaae0iiYi0qrF6SJ4M2EmpqHR85HRsgNKVSgREZGEFKsSytwjq6EBAwbw+OOP53zt3nvvzbnc3Zk/f35qZRMRac3iVLC6u/vNWc//ZGY/KlF5REREiqFYVYRHH32U9957j8GDB9O7d++1y2+66SZOPvnkRumHDRvG8ccfn3OM1ueff95omYhIWxSngrXIzEYCd0bPhwOLSlckERGRxBSrEhozZgzPPvssAwcO5Oc//zk/+tGP+MEPfgDAtddem7OC1a9fP84999ycXQifeOKJkpdZRKQ1iDNN+8nAscB84EPgGOCkUhZKREQkIcWqhB566CGeeuoprr76ambMmMGkSZPWdht0zz2z/dVXX03nzp1zvnbfffeVrKwiIq1JnFkE3wUOK3VBzOyrwE+BLu5+TKnzExGR6tFSsaqarFq1ig4dwmlATU0NdXV1jBo1iqFDh7Jy5cqc6wwalH8a+Nra2pKUU0SktclbwTKz8RS4OaO7n93Uxs3sJuBQ4CN33zFr+UGE+5W0B250919EU+x+z8z+mqD8IiLShqURq9qqPn36MGXKFPbee28A2rdvz4QJE7jwwgu555578q6XdNyWiEhb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QdTV1aWSXkSkLXD3Z8ysd4PFuwFvuftcADP7C3A4oAqWiIgUpApWK/bggw9y3333MWrUKM4991wOO+wwOnbsSK9evVJJLyLShm0JzMt6/h6wu5l9CbgMGGBmY9z98oYrmtkoYBTAVltt1RJlFakopb6ZsUil0xisVu7II49k0qRJPP300xx++OGsXLky1fQiIrKOuy9y99PcvU+uylWU5np3r3X32u7du7d0EUVEpMx0BasKbLTRRvzmN7/hpZde4rnnnks9vYhIG/Q+kD1HdI9omYhUgMmTJ3PPPfcwb9482rdvzzbbbMMpp5xC3759y100EVWwqkn//v3p379/ydKLiLQh04CvmdnWhIrVcYDmjBapAGPGjGH+/PkMHjyY+fPns/XWW9OnTx+GDh3KBRdcwNChQ8tdRGnjWmUFy8yGAEPUSqF+ziIizWVmdwL7AJua2XvAJe4+wczOAh4F2gM3ufurZSymiEQeeughZs+eDcBxxx3H3nvvzZVXXskxxxzDoEGDVMGSsmuVFSx3rwPqamtrTy13WUREpHVz9+F5lj8CPNLCxRGRJrRr147FixfTrVs3PvjgA1avXg1A165dcfcyl06klVawRERERKRtuuCCCxgwYADbbLMNr7/+On/4wx8AWLBggYY+SEVQBUtEREREWo1hw4ZxwAEHMHfuXPr27UtNTQ0A3bt354477ihv4URQBUtEREREWplu3brRrVu3chdDJCdVsERERFKmyZhESkuTdkkl042GRUREUubude4+qkuXLuUuioiItDBVsERERERERFKiCpaIiIiIVK3Fixdz6aWXcuONN+LuXHbZZRx66KGcd955fPzxx6msU0weUr1UwRIRERGRqjVy5Eg+/fRTZsyYwb777sv8+fP58Y9/TKdOnfjud7+byjrF5CHVS5NciIiIiEjV+uCDD3jkkUdwd3r06MHTTz8NwKBBg9h5551TWaeYPKR66QqWiIiIiFStNWvW8PHHHzNv3jyWL1/OO++8A8CiRYtYuXJlKusUk4dUL13BEhEREZGqNWbMGLbbbjsAbrrpJk455RTMjNdee41LLrkklXWKyUOqlypYIiIiIlK1hg8fzrHHHou706FDBw4//HBefPFFttxyS7bYYotU1ikmD6leqmCJiIiISFVr37792v87dOhAbW1t6usUk4dUJ1WwREREUmZmQ4Ahffv2LXdRRAR4u/ugWOn6LJha9DrF5CHVSZNcSF7uzt13383EiRNxd5588knOPvtsfv/737NmzZpU1mnLeYhI9XL3Oncf1aVLl3IXRUREWpiuYEleZ555Jh999BErV67kgQce4L///S+HHXYYDz/8MK+//jq//e1vm71OW85DRERERKqPKliS19SpU5k9ezZffPEFm2++OR9++CHrrbcew4cPZ+DAgams05bzEBEREZHqoy6CkleHDqH+3bFjR3bddVfWW2+9tcvbtcu96yRdpy3nISIiIiLVR2d+ktfmm2/O8uXLAfjb3/62dvn8+fPXViCau05bzkNERETaptGjR/Pss8+WdJ2WyENyUxdByWvSpEk5l2+yySY89NBDqazTlvMQERGRtum2227jmWeeYcGCBQwbNozhw4czYMCAVNdpiTwkN13BksQ22mgjvvzlL5d0nbach4iIiFS3Hj16MH36dB5//HE22WQTRo4cyXbbbcfPfvYz3njjjVTWaYk8JDdVsEREREREWpCZAbDNNttw0UUX8eqrr3L33Xfz+eef8+1vfzuVdVoiD8mtVXYR1A0cW1acG+e19I35qiUPERERaXvcvdGyfv360a9fPy6//PJU1mmJPCS3VnkFSzdwFBEREZHWaurU5I2tSddpiTwkt1ZZwRIRERERaa023njjkq/TEnlIbq2yi6CIiEglU1d2EWlKpQ5f0JCH5tMVLBERkZSpK7uISNulCpaIiIiIiEhKVMESERERERFJiSpYIiIiIiIiKVEFS0REREREJCWqYImIiIiIiKREFSwREREREUnsvvvuY/HixQAsWLCAE044gZ122olhw4bx3nvvpbJOS+SRNlWwREREREQksZ/+9Kd069YNgLPOOosBAwYwadIkDj74YE466aRU1mmJPNKmCpaIiIiIiCS2evXqtf+/9dZbnHPOOfTo0YPvfve7LFiwIJV1WiKPtKmCJSIiIiIiie2zzz5cfPHFrFixgn322Yf77rsPgMmTJ5PvRutJ12mJPNKmCpaIiIiIiCR27bXX0q5dO7bddlsmTpzI0UcfzSabbMINN9zAbbfdlso6LZFH2jqUPAcREREREak6HTt2ZOzYsYwdO5YlS5awatUqvvSlL6W6TkvkkTZVsEREREREpFmK6XqXdJ2WyCMNqmCJiIikzMyGAEP69u1b7qKIiJTU290HxUrXZ8HUotdpiTzSpDFYIiIiKXP3OncfVY6WUxERKS9VsERERERERFKiCpaIiIiIiEhKVMESERERERFJiSpYIiIiIiIiKVEFS0REREREJCWqYImIiIiIiKREFSwREREREZGUqIIlUkaPPvooEyZM4J133qm3/KabbkolfbXkUYllUh6lzUNERKSlLFy4sN7z22+/nbPPPpvrr78ed0+8PVWwRMrkggsu4LLLLmP27NkMHjyY8ePHr33t2muvbXb6asmjEsukPEqbh4iISEv61re+tfb/cePGcdttt7HLLrvw+OOPM3r06MTb65Bm4UQkvrq6OmbNmkWHDh0YO3YsI0aMYO7cuVx11VU5W0uSpq+WPCqxTMqjtHmIiIi0pOxYdO+99zJ16lQ22mgjRowYwcCBAxNvT1ewRMpk1apVdOgQ2jhqamqoq6tj6dKlDB06lJUrVzY7fbXkUYllUh6lzUNERKQlrVixglmzZjFjxgxWr17NRhttBEDHjh1p37594u2pgiVSJn369GHKlClrn7dv354JEyaw7bbbMmfOnGanr5Y8KrFMyqO0eYiIiLSkLbbYgtGjR3PuuefSrVs3PvzwQwAWLVq0toEwCWvN3TNqa2t9+vTpvN19UKz0fRZMXft/0nWUR+srU6XnsWLFCgA6derUKM3777/PlltuWW9Z0vTVkkcllkl5lDYPADOb4e61jV5oZTJxCqrjuKU8WneZlEdl5VGJZWrLeeSyevVq/vvf/7LhhhvmfD1frNIYLJEyyXWymZHrhDNp+mrJoxLLpDxKm4eIiEglaN++fd7KVSGtsoJlZkOAIX379i13UUSapRJbcHSVU3lUQh6tneKUiEjrkmacapVjsNy9zt1HdenSpdxFERERaURxSkSk7WqVFSwREREREZFKpAqWiIiIiIhISlTBEhERERERSYkqWCIiIiIiIilRBUtERERERCQlqmCJiIiIiIikRBUsERERERGRlKiCJSIiIiIikhJVsERERERERFKiCpaIiIiIiEhKVMESERERERFJibl7uctQNDNbALyb5+VNgYUJN5l0nbaaRyWWSXm0vTwqsUzKI708erl794TbqzhNxCko/+esPFo2j0osk/KorDwqsUzKI7/cscrdq/IBTC/1Om01j0osk/Joe3lUYpmUR2nzqMZHJX7OyqNy0iuPtpdH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\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "N = 30\n",
    "\n",
    "def bar_word_freqs(word_list, title):\n",
    "    vf = Counter(word_list)\n",
    "    total = int(sum(vf.values()))\n",
    "    y = [count for tag, count in vf.most_common(N)]\n",
    "    x = [tag for tag, count in vf.most_common(N)]\n",
    "\n",
    "    plt.bar(x, y, color='crimson')\n",
    "    plt.title(title)\n",
    "    plt.ylabel(\"Frequency (log scale)\")\n",
    "    plt.yscale('log')\n",
    "    plt.xticks(rotation=90)\n",
    "    for i, (tag, count) in enumerate(vf.most_common(N)):\n",
    "        plt.text(i, count, f' {count} ', rotation=90,\n",
    "                 ha='center', va='bottom', \n",
    "                 color='black')\n",
    "#                  ha='center', va='top' if count < 6 else 'bottom', \n",
    "#                  color='white' if count < 6 else 'black')\n",
    "    plt.xlim(-0.6, len(x)-0.4)\n",
    "\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.subplot(1,2,1)\n",
    "bar_word_freqs(test_female_verbs, \"Female verb frequencies\")\n",
    "\n",
    "plt.subplot(1,2,2)\n",
    "bar_word_freqs(test_male_verbs, \"Male verb frequencies\")\n",
    "\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "2ce8dc13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08381e60",
   "metadata": {},
   "source": [
    "#### Now we do the same, but including the named characters.\n",
    "\n",
    "And we extract the following words (see diagrams below):\n",
    "- verb associated with the noun subject in each sentence (nsubj)\n",
    "- adverbs associated with that verb (advmod)\n",
    "- nouns that are the object of the verb (dobj)\n",
    "- adjectives associated with that noun (acomp)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5732511c",
   "metadata": {},
   "source": [
    "#### To clarify the word types:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "ba5dc0e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"c5447f5abbd046e3beb9f1d4d6ca4db3-0\" class=\"displacy\" width=\"650\" height=\"317.0\" direction=\"ltr\" style=\"max-width: none; height: 317.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">She</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PRON</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">ate</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">VERB</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">dark</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">chocolate</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"227.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">hungrily.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">ADV</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-0\" stroke-width=\"2px\" d=\"M70,182.0 C70,122.0 160.0,122.0 160.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,184.0 L62,172.0 78,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-1\" stroke-width=\"2px\" d=\"M310,182.0 C310,122.0 400.0,122.0 400.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">amod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M310,184.0 L302,172.0 318,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-2\" stroke-width=\"2px\" d=\"M190,182.0 C190,62.0 405.0,62.0 405.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">dobj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M405.0,184.0 L413.0,172.0 397.0,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-3\" stroke-width=\"2px\" d=\"M190,182.0 C190,2.0 530.0,2.0 530.0,182.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-c5447f5abbd046e3beb9f1d4d6ca4db3-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advmod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M530.0,184.0 L538.0,172.0 522.0,172.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "demo_sentence = \"She ate dark chocolate hungrily.\"\n",
    "doc = nlp(demo_sentence)\n",
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "a95d3c10",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"533bbf1bf97a44bc86907e71bb20c159-0\" class=\"displacy\" width=\"650\" height=\"257.0\" direction=\"ltr\" style=\"max-width: none; height: 257.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">The</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">fat</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">mouse</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">looked</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">VERB</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">good.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-533bbf1bf97a44bc86907e71bb20c159-0-0\" stroke-width=\"2px\" d=\"M70,122.0 C70,2.0 290.0,2.0 290.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-533bbf1bf97a44bc86907e71bb20c159-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,124.0 L62,112.0 78,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-533bbf1bf97a44bc86907e71bb20c159-0-1\" stroke-width=\"2px\" d=\"M190,122.0 C190,62.0 285.0,62.0 285.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-533bbf1bf97a44bc86907e71bb20c159-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">amod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M190,124.0 L182,112.0 198,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-533bbf1bf97a44bc86907e71bb20c159-0-2\" stroke-width=\"2px\" d=\"M310,122.0 C310,62.0 405.0,62.0 405.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-533bbf1bf97a44bc86907e71bb20c159-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M310,124.0 L302,112.0 318,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-533bbf1bf97a44bc86907e71bb20c159-0-3\" stroke-width=\"2px\" d=\"M430,122.0 C430,62.0 525.0,62.0 525.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-533bbf1bf97a44bc86907e71bb20c159-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">acomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M525.0,124.0 L533.0,112.0 517.0,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "demo_sentence = \"The fat mouse looked good.\"\n",
    "doc = nlp(demo_sentence)\n",
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "381cbd70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"38a5760695244b81b2b4e7a386a3dbef-0\" class=\"displacy\" width=\"530\" height=\"257.0\" direction=\"ltr\" style=\"max-width: none; height: 257.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">He</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PRON</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">was</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">AUX</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">very</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">ADV</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">hungry.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-38a5760695244b81b2b4e7a386a3dbef-0-0\" stroke-width=\"2px\" d=\"M70,122.0 C70,62.0 165.0,62.0 165.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-38a5760695244b81b2b4e7a386a3dbef-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,124.0 L62,112.0 78,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-38a5760695244b81b2b4e7a386a3dbef-0-1\" stroke-width=\"2px\" d=\"M310,122.0 C310,62.0 405.0,62.0 405.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-38a5760695244b81b2b4e7a386a3dbef-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advmod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M310,124.0 L302,112.0 318,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-38a5760695244b81b2b4e7a386a3dbef-0-2\" stroke-width=\"2px\" d=\"M190,122.0 C190,2.0 410.0,2.0 410.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-38a5760695244b81b2b4e7a386a3dbef-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">acomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M410.0,124.0 L418.0,112.0 402.0,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "demo_sentence = \"He was very hungry.\"\n",
    "doc = nlp(demo_sentence)\n",
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "435e5923",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"72d9f48f2e2c4557afa95833cb16999c-0\" class=\"displacy\" width=\"650\" height=\"257.0\" direction=\"ltr\" style=\"max-width: none; height: 257.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">He</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PRON</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">was</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">AUX</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">in</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">ADP</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">the</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">DET</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">kitchen.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">NOUN</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-72d9f48f2e2c4557afa95833cb16999c-0-0\" stroke-width=\"2px\" d=\"M70,122.0 C70,62.0 165.0,62.0 165.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-72d9f48f2e2c4557afa95833cb16999c-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,124.0 L62,112.0 78,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-72d9f48f2e2c4557afa95833cb16999c-0-1\" stroke-width=\"2px\" d=\"M190,122.0 C190,62.0 285.0,62.0 285.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-72d9f48f2e2c4557afa95833cb16999c-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">prep</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M285.0,124.0 L293.0,112.0 277.0,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-72d9f48f2e2c4557afa95833cb16999c-0-2\" stroke-width=\"2px\" d=\"M430,122.0 C430,62.0 525.0,62.0 525.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-72d9f48f2e2c4557afa95833cb16999c-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">det</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M430,124.0 L422,112.0 438,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-72d9f48f2e2c4557afa95833cb16999c-0-3\" stroke-width=\"2px\" d=\"M310,122.0 C310,2.0 530.0,2.0 530.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-72d9f48f2e2c4557afa95833cb16999c-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">pobj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M530.0,124.0 L538.0,112.0 522.0,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "demo_sentence = \"He was in the kitchen.\"\n",
    "doc = nlp(demo_sentence)\n",
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "0730c57c",
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = pd.read_excel('../Book List Exel April.xlsx', sheet_name='Sheet1')\n",
    "labels = labels.rename(columns={'Author ': 'Author'})\n",
    "#labels.loc[labels.Title=='The Gruffalo']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0ee93b3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'F/M/M', 'M', 'NGS PLURAL', 'NGS', 'F/M', 'F', 'M PLURAL ',\n",
       "       'M  ', 'M/M', 'NGS/NGS ', 'M/NGS/NGS/NGS/NGS', 'PLURAL NGS',\n",
       "       'NGS SINGULAR AND PLURAL', 'NGS MANY'], dtype=object)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels['Protagonist Gender'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "36b16fd1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([nan, 'Sarah/Percy/Bill', 'Eddy', 'we', 'Percy', 'Grinch ',\n",
       "       'innkeeper', 'little dove', 'Elmer', 'Jake', 'Sir Charlie ',\n",
       "       'Harry', 'monkey', 'snail / whale', 'McTat ', 'witch', 'Superworm',\n",
       "       'Mouse', \"Gruffalo's child\", 'Charlie Cook', 'Norman', 'duck',\n",
       "       'cavemen/dinos', 'Kipper', 'Postman', 'Dave/Dogger', 'boy',\n",
       "       'Baby bear', 'Arthur', 'Mr Bear', 'dog/frog', 'I', 'ladybird',\n",
       "       'Squash', 'caterpillar', 'spider', 'ladybird/it',\n",
       "       'Danny/dinosaur dino', 'Badger/animals/Rabbit/Fox/Mice/Robin',\n",
       "       'Bubble/Squeak', 'Santa', 'Jasper', 'crocodile', 'Sophie/Tiger',\n",
       "       'Scruffy Bear', 'Cyril/Bruce', 'I/we', 'Monkey', 'Pearl/Zog',\n",
       "       'Stick Man', 'Janet / Bill', 'Zog', 'Supertato', 'Hippo', 'Lion',\n",
       "       'Elephant', 'Giraffe', 'Tiger'], dtype=object)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels['Protagonist Name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "9b12f8b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "female_verbs = list()\n",
    "male_verbs = list()\n",
    "\n",
    "female_ads = list()\n",
    "male_ads = list()\n",
    "\n",
    "female_advs = list()\n",
    "male_advs = list()\n",
    "\n",
    "female_nouns = list()\n",
    "male_nouns = list()\n",
    "\n",
    "def add_words(noun, adv, adj, noun_list, adv_list, adj_list):\n",
    "    if noun is not None:\n",
    "        noun_list.append(noun)\n",
    "    if adv is not None:\n",
    "        adv_list.append(adv)\n",
    "    if adj is not None:\n",
    "        adj_list.append(adj)\n",
    "        \n",
    "    return noun_list, adv_list, adj_list\n",
    "\n",
    "for title, text in zip(df.Title, df.Text):\n",
    "    text = text.replace('\\n', ' ')\n",
    "    doc = nlp(text)\n",
    "    \n",
    "    protagonist = labels.loc[labels.Title==title]['Protagonist Name'].values\n",
    "    protagonist_gender = labels.loc[labels.Title==title]['Protagonist Gender'].values\n",
    "\n",
    "    for possible_subject in doc:\n",
    "            if possible_subject.dep_ == 'nsubj' and possible_subject.head.pos_ == 'VERB':\n",
    "                \n",
    "                if possible_subject.head.lemma_ == \"’\":\n",
    "                    #print(possible_subject.head, [child for child in possible_subject.head.children])\n",
    "                    #print(title)\n",
    "                    lem = 'be'\n",
    "                else:\n",
    "                    lem = possible_subject.head.lemma_\n",
    "                    \n",
    "                noun = None\n",
    "                adv = None\n",
    "                adj = None\n",
    "                for child in possible_subject.head.children:\n",
    "                    if child.dep_ == 'dobj':\n",
    "                        noun = child.lower_ #.lemma_\n",
    "                    elif child.dep_ == 'acomp':\n",
    "                        adj = child.lower_ #.lemma_\n",
    "                    elif child.dep_ == 'advmod':\n",
    "                        adv = child.lower_ #.lemma_\n",
    "                    \n",
    "                if possible_subject.lower_ == 'he':\n",
    "                    male_verbs.append(lem)\n",
    "                    male_nouns, male_advs, male_ads = add_words(noun, adv, adj, male_nouns, male_advs, male_ads)\n",
    "                    \n",
    "                elif possible_subject.lower_ == 'she':    \n",
    "                    female_verbs.append(lem)\n",
    "                    female_nouns, female_advs, female_ads = add_words(noun, adv, adj, female_nouns, female_advs, female_ads)\n",
    "                    \n",
    "                if len(protagonist) == 1 and isinstance(protagonist[0], str):\n",
    "                    protagonist = protagonist[0].split('/')\n",
    "                    protagonist_gender = protagonist_gender[0].split('/')\n",
    "                    \n",
    "                    for p, pg in zip(protagonist, protagonist_gender):\n",
    "                        #print(p, pg)\n",
    "                        if possible_subject.lower_ == p.lower():\n",
    "                            if pg == 'M':\n",
    "                                male_verbs.append(lem)\n",
    "                                male_nouns, male_advs, male_ads = add_words(noun, adv, adj, male_nouns, male_advs, male_ads)\n",
    "                            elif pg == 'F':\n",
    "                                female_verbs.append(lem)\n",
    "                                female_nouns, female_advs, female_ads = add_words(noun, adv, adj, female_nouns, female_advs, female_ads)\n",
    "#                 if not(np.isnan(protagonist) and np.isnan(protagonist_gender)):\n",
    "#                     if len(protagonist_gender.split('/')) == 1:\n",
    "                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "120d0b86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Without named protagonists we had: 201 female verbs and 751 male verbs.\n",
      "Now, with named protagonists we had: 280 female verbs and 1009 male verbs.\n",
      "We also have:\n",
      "57 female adverbs and 252 male adverbs\n",
      "9 female adjectives and 29 male adjectives\n",
      "95 female nouns and 341 male noun\n"
     ]
    }
   ],
   "source": [
    "print(\"Without named protagonists we had: %d female verbs and %d male verbs.\" % (len(test_female_verbs), len(test_male_verbs)))\n",
    "print(\"Now, with named protagonists we had: %d female verbs and %d male verbs.\" % (len(female_verbs), len(male_verbs)))\n",
    "\n",
    "print(\"We also have:\")\n",
    "\n",
    "print(\"%d female adverbs and %d male adverbs\" %(len(female_advs), len(male_advs)))\n",
    "print(\"%d female adjectives and %d male adjectives\" %(len(female_ads), len(male_ads)))\n",
    "print(\"%d female nouns and %d male noun\" %(len(female_nouns), len(male_nouns)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "cccbf9a4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('him', 10),\n",
       " ('them', 4),\n",
       " ('it', 4),\n",
       " ('broomstick', 4),\n",
       " ('things', 2),\n",
       " ('box', 2),\n",
       " ('dogger', 2),\n",
       " ('lots', 2),\n",
       " ('that', 2),\n",
       " ('web', 2),\n",
       " ('which', 2),\n",
       " ('what', 2),\n",
       " ('book', 1),\n",
       " ('lift', 1),\n",
       " ('temperatures', 1),\n",
       " ('dave', 1),\n",
       " ('race', 1),\n",
       " ('prize', 1),\n",
       " ('sight', 1),\n",
       " ('story', 1),\n",
       " ('mind', 1),\n",
       " ('hattie', 1),\n",
       " ('monkey', 1),\n",
       " ('breath', 1),\n",
       " ('fly', 1),\n",
       " ('mice', 1),\n",
       " ('magic', 1),\n",
       " ('sleeve', 1),\n",
       " ('aliens', 1),\n",
       " ('nook', 1)]"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(female_nouns).most_common(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "369f0c19",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('it', 21),\n",
       " ('what', 18),\n",
       " ('them', 13),\n",
       " ('door', 7),\n",
       " ('head', 6),\n",
       " ('cake', 6),\n",
       " ('dinosaurs', 5),\n",
       " ('book', 5),\n",
       " ('names', 4),\n",
       " ('him', 4),\n",
       " ('more', 4),\n",
       " ('star', 4),\n",
       " ('books', 4),\n",
       " ('idea', 3),\n",
       " ('imaginations', 3),\n",
       " ('that', 3),\n",
       " ('one', 3),\n",
       " ('bella', 3),\n",
       " ('her', 3),\n",
       " ('eyes', 3),\n",
       " ('friends', 3),\n",
       " ('truth', 3),\n",
       " ('hole', 2),\n",
       " ('song', 2),\n",
       " ('mum', 2),\n",
       " ('time', 2),\n",
       " ('balloons', 2),\n",
       " ('sound', 2),\n",
       " ('hedgehog', 2),\n",
       " ('lid', 2)]"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(male_nouns).most_common(30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "e833a170",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('then', 42),\n",
       " ('so', 21),\n",
       " ('when', 19),\n",
       " ('where', 9),\n",
       " ('now', 7),\n",
       " ('back', 6),\n",
       " ('always', 6),\n",
       " ('away', 5),\n",
       " ('next', 5),\n",
       " ('first', 5),\n",
       " ('there', 5),\n",
       " ('hard', 5),\n",
       " ('again', 5),\n",
       " ('off', 4),\n",
       " ('just', 4),\n",
       " ('how', 4),\n",
       " ('ever', 4),\n",
       " ('instead', 4),\n",
       " ('up', 4),\n",
       " ('too', 4)]"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(male_advs).most_common(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "0d278881",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('so', 11),\n",
       " ('when', 6),\n",
       " ('then', 4),\n",
       " ('away', 3),\n",
       " ('how', 3),\n",
       " ('always', 2),\n",
       " ('now', 2),\n",
       " ('proudly', 1),\n",
       " ('overhead', 1),\n",
       " ('fast', 1),\n",
       " ('already', 1),\n",
       " ('tightly', 1),\n",
       " ('too', 1),\n",
       " ('far', 1),\n",
       " ('gladly', 1),\n",
       " ('out', 1),\n",
       " ('though', 1),\n",
       " ('easily', 1),\n",
       " ('right', 1),\n",
       " ('only', 1)]"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(female_advs).most_common(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "9b6d4866",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('say', 174),\n",
       " ('go', 43),\n",
       " ('want', 29),\n",
       " ('see', 27),\n",
       " ('take', 26),\n",
       " ('find', 25),\n",
       " ('think', 24),\n",
       " ('get', 21),\n",
       " ('like', 21),\n",
       " ('try', 18),\n",
       " ('tell', 18),\n",
       " ('look', 14),\n",
       " ('feel', 14),\n",
       " ('fly', 12),\n",
       " ('call', 12),\n",
       " ('know', 11),\n",
       " ('eat', 11),\n",
       " ('ask', 11),\n",
       " ('hear', 11),\n",
       " ('share', 11)]"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(male_verbs).most_common(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "373f9d54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('say', 53),\n",
       " ('tell', 10),\n",
       " ('cry', 9),\n",
       " ('be', 9),\n",
       " ('ask', 9),\n",
       " ('answer', 9),\n",
       " ('hop', 7),\n",
       " ('look', 7),\n",
       " ('go', 6),\n",
       " ('see', 6),\n",
       " ('find', 5),\n",
       " ('think', 4),\n",
       " ('know', 4),\n",
       " ('hold', 4),\n",
       " ('give', 4),\n",
       " ('tap', 4),\n",
       " ('catch', 3),\n",
       " ('take', 3),\n",
       " ('win', 3),\n",
       " ('gaze', 3)]"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(female_verbs).most_common(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee306bbf",
   "metadata": {},
   "source": [
    "#### Adjectival modifiers:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "4a8fc0dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mouse little\n",
      "mouse brown\n",
      "mouse little\n",
      "mouse little\n",
      "mouse brown\n",
      "mouse little\n",
      "mouse little\n",
      "mouse brown\n",
      "mouse little\n",
      "mouse little\n",
      "mouse little\n",
      "mouse little\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "ladybird poor\n",
      "ladybird old\n",
      "ladybird lazy\n",
      "ladybird lazy\n",
      "spider busy\n",
      "duck poor\n",
      "duck poor\n",
      "witch grateful\n",
      "monkey little\n",
      "monkey little\n",
      "monkey quick\n",
      "monkey little\n",
      "monkey little\n"
     ]
    }
   ],
   "source": [
    "female_adjs = list()\n",
    "male_adjs = list()\n",
    "\n",
    "for title, text in zip(df.Title, df.Text):\n",
    "    text = text.replace('\\n', ' ')\n",
    "    doc = nlp(text)\n",
    "    \n",
    "    protagonist = labels.loc[labels.Title==title]['Protagonist Name'].values\n",
    "    protagonist_gender = labels.loc[labels.Title==title]['Protagonist Gender'].values\n",
    "\n",
    "    for possible_amod in doc:\n",
    "            if possible_amod.dep_ == 'amod' and possible_amod.head.pos_ == 'NOUN':\n",
    "                \n",
    "#                 if possible_subject.head.lemma_ == \"’\":\n",
    "#                     #print(possible_subject.head, [child for child in possible_subject.head.children])\n",
    "#                     #print(title)\n",
    "#                     lem = 'be'\n",
    "#                 else:\n",
    "#                     lem = possible_subject.head.lemma_\n",
    "                lem = possible_amod.lemma_\n",
    "                    \n",
    "                if possible_amod.head.lower_ in ['he', 'boy', 'man', 'dad', 'father', 'guy', 'brother', 'son']:\n",
    "                    male_adjs.append(lem)\n",
    "                    #print(possible_amod.head.lower_, lem)\n",
    "                elif possible_amod.head.lower_ == ['she', 'girl', 'woman', 'mum', 'mother', 'lady', 'sister', 'daughter']:    \n",
    "                    female_adjs.append(lem)\n",
    "                    #print(possible_amod.head.lower_, lem)\n",
    "                    \n",
    "                if len(protagonist) == 1 and isinstance(protagonist[0], str):\n",
    "                    protagonist = protagonist[0].split('/')\n",
    "                    protagonist_gender = protagonist_gender[0].split('/')\n",
    "                    \n",
    "                    for p, pg in zip(protagonist, protagonist_gender):\n",
    "                        if possible_amod.head.lower_ == p.lower():\n",
    "                            print(p.lower(), lem)\n",
    "                            if pg == 'M':\n",
    "                                male_adjs.append(lem)\n",
    "                            elif pg == 'F':\n",
    "                                female_adjs.append(lem)\n",
    "\n",
    "                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "7e03cca6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n",
      "19\n"
     ]
    }
   ],
   "source": [
    "print(len(female_adjs))\n",
    "print(len(male_adjs))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "9ccd3697",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('little', 9),\n",
       " ('brown', 3),\n",
       " ('good', 2),\n",
       " ('new', 2),\n",
       " ('young', 1),\n",
       " ('clever', 1),\n",
       " ('special', 1)]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(male_adjs).most_common(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "eae30e05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('lazy', 13), ('poor', 1), ('old', 1), ('busy', 1), ('grateful', 1)]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Counter(female_adjs).most_common(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "690a7eea",
   "metadata": {},
   "source": [
    "### Things to resolve:\n",
    "\n",
    "1. Plural genders (e.g. cavemen)\n",
    "2. Double barrel names (e.g. Stick Man, Charlie Cook etc)\n",
    "3. Why don't we gain as many male verbs as femal verbs by introducing named characters? (partly this was due to not using lower case)\n",
    "4. Add his/hers e.g. \"His favourite food is roasted fox\"\n",
    "5. Add recognition of who is speaking. e.g. \"I'm going to have lunch with a gruffalo\"\n",
    "\n",
    "Need to do proper NER rather than just using nsubj?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3de42832",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span class=\"tex2jax_ignore\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:lang=\"en\" id=\"96673dd6dd5945bf9ae5db8daa0d6238-0\" class=\"displacy\" width=\"650\" height=\"257.0\" direction=\"ltr\" style=\"max-width: none; height: 257.0px; color: #000000; background: #ffffff; font-family: Arial; direction: ltr\">\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"50\">Charlie</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"50\">PROPN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"170\">Cook</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"170\">PROPN</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"290\">was</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"290\">AUX</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"410\">very</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"410\">ADV</tspan>\n",
       "</text>\n",
       "\n",
       "<text class=\"displacy-token\" fill=\"currentColor\" text-anchor=\"middle\" y=\"167.0\">\n",
       "    <tspan class=\"displacy-word\" fill=\"currentColor\" x=\"530\">hungry.</tspan>\n",
       "    <tspan class=\"displacy-tag\" dy=\"2em\" fill=\"currentColor\" x=\"530\">ADJ</tspan>\n",
       "</text>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-0\" stroke-width=\"2px\" d=\"M70,122.0 C70,62.0 165.0,62.0 165.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-0\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">compound</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M70,124.0 L62,112.0 78,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-1\" stroke-width=\"2px\" d=\"M190,122.0 C190,62.0 285.0,62.0 285.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-1\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">nsubj</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M190,124.0 L182,112.0 198,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-2\" stroke-width=\"2px\" d=\"M430,122.0 C430,62.0 525.0,62.0 525.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-2\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">advmod</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M430,124.0 L422,112.0 438,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "\n",
       "<g class=\"displacy-arrow\">\n",
       "    <path class=\"displacy-arc\" id=\"arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-3\" stroke-width=\"2px\" d=\"M310,122.0 C310,2.0 530.0,2.0 530.0,122.0\" fill=\"none\" stroke=\"currentColor\"/>\n",
       "    <text dy=\"1.25em\" style=\"font-size: 0.8em; letter-spacing: 1px\">\n",
       "        <textPath xlink:href=\"#arrow-96673dd6dd5945bf9ae5db8daa0d6238-0-3\" class=\"displacy-label\" startOffset=\"50%\" side=\"left\" fill=\"currentColor\" text-anchor=\"middle\">acomp</textPath>\n",
       "    </text>\n",
       "    <path class=\"displacy-arrowhead\" d=\"M530.0,124.0 L538.0,112.0 522.0,112.0\" fill=\"currentColor\"/>\n",
       "</g>\n",
       "</svg></span>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "demo_sentence = \"Charlie Cook was very hungry.\"\n",
    "doc = nlp(demo_sentence)\n",
    "displacy.render(doc, style=\"dep\", options={'distance':120});"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "465e2425",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
